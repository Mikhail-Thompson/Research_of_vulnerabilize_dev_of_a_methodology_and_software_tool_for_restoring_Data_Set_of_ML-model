Реализация практического метода для уязвимости Data_Leakage.
1) Для выполнения кода, рекомендуется создать виртуальное пространство(virtualenv) в Python,
Алгорит virtualenv написан в конце файла.
2) Установить requirements.txt, командой:
   pip install -r requirements.txt

(3) Generater_Data_Leakage.py - Генерация данных.
   1.Генерация данных:Признаки: возраст, зарплата, количество покупок.
   2.Цлевая переменная: класс (например, покупка или не покупка).

   Описание:
Мы генерируем 500 случайных строк данных, где для каждого примера есть:
Возраст (age).
Зарплата (salary).
Количество покупок (purchases).
Целевая переменная (class): 0 — не купил, 1 — купил.
Если целевая переменная равна 1 (человек купил), мы увеличиваем количество покупок, что является примером утечки данных.

(4) Data_Leakage.py -нормализация данных.
   Загружает JSON файл.
   Ипользует 2 метод -Предобработка данных без утечек с использованием подметода Min-Max Scaling
   Отфильтрованные данные сохраняются в новый файл JSON.

Алгорит для virtualenv в терминале Python:
   1. pip install virtualenv ( Если не установлен)
   2. Создание виртуальной среды: python -m venv Название
   3. Перейти в создавшуюся папку: cd Название
   4. Активация. Написать :.\Scripts\activate
   5. При успешной активации появиться название папки Зелёным цветом в скобках.
   6. 7.Деактивация: deactivate
   7. Чтобы удалить проект, достаточно удалить создавшуюся папку.

*В случае с ошибкой в PIP - обновить его именно в активной virtualenv командой:
   python -m pip install --upgrade pip
